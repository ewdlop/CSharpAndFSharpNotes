<Query Kind="Statements">
  <NuGetReference>Microsoft.SqlServer.DacFx</NuGetReference>
  <Namespace>Microsoft.SqlServer.TransactSql.ScriptDom</Namespace>
</Query>

//Assembly assembly = Assembly.GetAssembly(typeof(TSqlParser));
//assembly.GetTypes().Select(t => (t, hierachy: t.GetInheritanceHierarchy()))
//	.Where(h => h.hierachy.Contains(typeof(TSqlFragment))).OrderBy(h => h.t.Name).Dump();


string sql = """
SELECT RX_PATIENT_DMREFID as pat_id,RX_PACKAGE_DMREFID as code_id,PRODUCT_PROPRIETARY_NAME AS DESCRIPTION,RX_FILL_DATE AS SVC_DATE,INDEX_DATE,
CASE WHEN PACKAGE_NDC11 IN ('76431010501','76431011001','76431012001','76431013001','76431014001','76431016001') THEN 'Juxtapid'
     WHEN  PACKAGE_NDC11 IN ('71015723','71015823','55289086130','71015773','71015873','71015740','71015892','71015788','63629336603',
                             '71015888','49999088290','54868493400','58016005100','49999046830','13411011501') THEN 'LIPTOR'
     WHEN PACKAGE_NDC11 IN ('310075290','310075430','310075239','310759030','43353003145','68071026330','43353003115','43353003160','43353028945',
                            '43353003182','43353028915','54868189001','35356041330','49999099290','55289093230','310758090') THEN 'Crestor'
     WHEN PACKAGE_NDC11 IN ('72511076002','55513076002','72511075001','55513075001','72511077001','72511076001','55513076001','55513077001','55513076003') THEN 'Repatha_PCSK9'
     WHEN PACKAGE_NDC11 IN ('24590102','61755002002','72733590102','61755002102','72733590202','24590202','24590101','24590302','24590402','24590201',
                            '72733590101','24590301','24590401','24590100','24590200','61755002101','72733590201','61755002001','24590400','61755002104',
                            '61755002004','24590300') THEN 'Praluent_PCSK9'
     WHEN PACKAGE_NDC11 IN ('66582041431','69238115403','67877049005','59651005290','49884022811','781569031','69238115409','67877049090',
                            '66582041454','59651005230','67877049030','60505294509','16729043316','66582041474','781569005','68382077306',
                            '591371330','68382077305','49884022809','16729043315','51660020005','51660020090','68382077316','49884022805',
                            '781569092') THEN 'Ezetimibe'                       
     ELSE 'OTHERS' END AS name
from
(SELECT * FROM
(SELECT RX_PATIENT_DMREFID,RX_PACKAGE_DMREFID,RX_FILL_DATE FROM "MEDFUSESHASTA"."SHASTA202208"."RXCLAIMS") RX
inner join 
(select distinct PATIENT_DMREFID,INDEX_DATE from "AMYT12DB"."WORK"."AMRYT_UNIVERSAL_EDA_ACTIVITY_PRESTEP8"
where PRODUCT = 'JUXTAPID') PAT
on RX.RX_PATIENT_DMREFID = PAT.PATIENT_DMREFID)RX_MASTER
LEFT JOIN 
(SELECT PACKAGE_DMREFID,PACKAGE_NDC11,PRODUCT_PROPRIETARY_NAME FROM "MEDFUSESHASTA"."SHASTA202208"."PACKAGES")PKG_NAME
ON RX_MASTER.RX_PACKAGE_DMREFID = PKG_NAME.PACKAGE_DMREFID

 

UNION ALL
----------------------------------------------------------------

 

SELECT DX_PATIENT_DMREFID as pat_id,DX_DIAGNOSIS_CODE_DMREFID as code_id,DIAGNOSIS_NAME AS DESCRIPTION,DX_SERVICE_DATE AS SVC_DATE,INDEX_DATE,
CASE WHEN DIAGNOSIS_CODE_NO_SEPARATOR IN ('E7801') THEN 'HOFH'
     WHEN  DIAGNOSIS_CODE_NO_SEPARATOR IN ('E785 ','E7800','E782') THEN    'CHOLESTROL'
     WHEN DIAGNOSIS_CODE_NO_SEPARATOR IN ('H0260','H026','H0266','H0263','H0265','H0262','H0261','H0264') THEN 'Xanthelasma'
     WHEN DIAGNOSIS_CODE_NO_SEPARATOR IN ('H18419','H18413','H18412','H18411') THEN 'Arcus_senilis'
     WHEN DIAGNOSIS_CODE_NO_SEPARATOR IN ('M6780','E755','M67824','M67823','M6790') THEN 'TENDON_DISORDER'
     WHEN DIAGNOSIS_CODE_NO_SEPARATOR IN ('I2510','I25110','I25111','I25112','I25118','I25119','I25700','I25701','I25702','I25708','I25709',
                                          'I25710','I25711','I25712','I25718','I25719','I25720','I25721','I25722','I25728','I25729','I25730',
                                          'I25731','I25732','I25738','I25739','I25750','I25751','I25752','I25758','I25759','I25760','I25761',
                                          'I25762','I25768','I25769','I25790','I25791','I25792','I25798','I25799','I25810','I25811','I25812',
                                          'I2582','I2583','I2584','I2589','I241','I248','I249','I253','I2541','I2542','I519','I75019','I75029',
                                          'I7581','I7589','R072','R079','R740','R7982','R9430','R9431','R9439','T81718A','T8172XA','V8679','Z951',
                                          'Z9861','I469','I472','I4901','I4902','I970','I97110','I97190','Z8241','Z95810','I255','I259','I7389',
                                          'I739','Z8249','Z95818','I7401','I7409','I7411','I742','I743','I745','I748','I749','I350','I351','I352',
                                          'I358','I359','I501','I5020','I5021','I5022','I5023','I5030','I5031','I5032','I5033','I5040','I5041',
                                          'I5042','I5043','I509','I510','I511','I512','I517','I97130','I700','I701','I70209','I70219','I70229',
                                          'I7025','I70269','I70299','I70399','I70499','I70599','I708','I7090','I7091','I7092','Z136','I10','I110',
                                          'I119','I130','I1310','I1311','I1312','I132','R030','G459','I4891','I4892','I63019','I63119','I63139',
                                          'I6320','I63219','I6322','I63239','I6330','I6340','I6350','I6359','I6509','I6529','I658','I659','I6609',
                                          'I6619','I6629','I669','I672','I6781','I6782','I67848','I6789','I679','I69898','I6990','I69910','I69911',
                                          'I69912','I69913','I69914','I69915','I69918','I69919','I69920','I69921','I69922','I69923','I69928','I69931',
                                          'I69932','I69933','I69934','I69939','I69941','I69942','I69943','I69944','I69949','I69951','I69952','I69953',
                                          'I69954','I69959','I69961','I69962','I69963','I69964','I69965','I69969','I69990','I69991','I69992','I69993',
                                          'I69998','Z823','Z8673','R011','R012','R0782','R0789','R0989','I2101','I2102','I2109','I2111','I2119','I2121',
                                          'I2129','I213','I214','I219','I21A1','I21A9','I220','I221','I222','I228','I229','I230','I231','I232','I233','I234',
                                          'I235','I236','I237','I238','I240','I252','I200','I201','I208','I209') THEN 'Cardiac_event'
     ELSE 'OTHERS' END AS name
from
(SELECT * FROM
(select DX_PATIENT_DMREFID,DX_DIAGNOSIS_CODE_DMREFID,DX_SERVICE_DATE from"MEDFUSESHASTA"."SHASTA202208"."DXCLAIMS") DX
inner join 
(select distinct PATIENT_DMREFID,INDEX_DATE from "AMYT12DB"."WORK"."AMRYT_UNIVERSAL_EDA_ACTIVITY_PRESTEP8"
where PRODUCT = 'JUXTAPID') PAT
on DX.DX_PATIENT_DMREFID = PAT.PATIENT_DMREFID)DX_MASTER
LEFT JOIN 
(select DIAGNOSIS_CODE_DMREFID,DIAGNOSIS_CODE_NO_SEPARATOR,DIAGNOSIS_NAME from "MEDFUSESHASTA"."SHASTA202208"."DIAGNOSES")DX_NAME

 

ON DX_MASTER.DX_DIAGNOSIS_CODE_DMREFID = DX_NAME.DIAGNOSIS_CODE_DMREFID

 

UNION ALL
------------------------------------------------------------------------------------------------------
SELECT PX_PATIENT_DMREFID as pat_id,PX_PROCEDURE_CODE_DMREFID as code_id,PROCEDURE_NAME AS DESCRIPTION,PX_PROCEDURE_DATE AS SVC_DATE,INDEX_DATE,
CASE WHEN PROCEDURE_CODE_NO_SEPARATOR IN ('80061','83721','82465','83718','84478') THEN 'LIPID_PANEL'
     WHEN  PROCEDURE_CODE_NO_SEPARATOR IN ('81401','81403','81405','81406','81407','81479') THEN 'GENETIC_TEST'
     WHEN PROCEDURE_CODE_NO_SEPARATOR IN ('S2120') THEN 'Low_density_lipoprotein_apheresis'
     WHEN PROCEDURE_CODE_NO_SEPARATOR IN ('S2120','36516','6A550Z3','6A551Z3','0342T') THEN 'APHERESIS'
     ELSE 'OTHERS' END AS name
FROM
(SELECT * FROM
(select PX_PATIENT_DMREFID,PX_PROCEDURE_CODE_DMREFID,PX_PROCEDURE_DATE from "MEDFUSESHASTA"."SHASTA202208"."PXCLAIMS") PX
inner join (select distinct PATIENT_DMREFID,INDEX_DATE from "AMYT12DB"."WORK"."AMRYT_UNIVERSAL_EDA_ACTIVITY_PRESTEP8"
where PRODUCT = 'JUXTAPID') PAT
on PX.PX_PATIENT_DMREFID = PAT.PATIENT_DMREFID)PX_MASTER
left join  
(select PROCEDURE_CODE_DMREFID,PROCEDURE_CODE_NO_SEPARATOR,PROCEDURE_NAME from "MEDFUSESHASTA"."SHASTA202208"."PROCEDURES") PX_CODE
ON PX_MASTER.PX_PROCEDURE_CODE_DMREFID = PX_CODE.PROCEDURE_CODE_DMREFID
""";

string sql3 = """
SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_3_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_3_COL_1" , 
	   ( COUNT ( DISTINCT "SUBQUERY_2"."SUBQUERY_2_COL_2" ) ) AS "SUBQUERY_3_COL_2" 
	   FROM ( SELECT ( "SUBQUERY_1"."PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , 
	   ( CASE WHEN ( ( "SUBQUERY_1"."CODE" = '00002850101' ) OR ( "SUBQUERY_1"."CODE" = '00002882427' ) ) THEN 'U500_insulin' ELSE "SUBQUERY_1"."TRINITYGROUP2" END ) AS "SUBQUERY_2_COL_1" , 
	   ( "SUBQUERY_1"."CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_2" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from AMYT12DB.WORK.AMRYT_MYALEPT_MODELLING_COHORT_STEP8_V1 ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( "SUBQUERY_0"."SERVICE_DATE" IS NOT NULL ) AND ( ( ( "SUBQUERY_0"."SERVICE_DATE" > to_timestamp_ntz( 1651363200000000 , 6) ) AND ( "SUBQUERY_0"."SERVICE_DATE" < to_timestamp_ntz( 1667260800000000 , 6) ) ) AND CASE WHEN ( ( "SUBQUERY_0"."CODE" = '00002850101' ) OR ( "SUBQUERY_0"."CODE" = '00002882427' ) ) THEN 'U500_insulin' ELSE "SUBQUERY_0"."TRINITYGROUP2" END IN ( 'Lipid_Panel' , 'Liver_Biopsy' , 'Liver_Disease' , 'Insulin_Panel' , 'Hyperphagia' , 'Obesity' , 'CGM' , 'Insulin' , 'U500_insulin' , 'Plasmapheresis' , 'Fibrate' , 'Blood_Glucose_Monitor_BGM' , 'Failure_to_Thrive' , 'Echocardiogram' , 'Kidney_Disease' , 'Acanthosis_Nigricans' , 'Insulin_resistance' , 'Cardiomyopathy' , 'Albumin_liver_enzyme' , 'Electrocardiogram' , 'Proteinuria_Micro_Macro_Albuminuria' , 'GLP1_agonists' , 'Liver_Transplant' , 'angiotensin_receptor_blockers_ARB' , 'Splenomegaly' , 'DXA_Scan' , 'Albumin' , 'Leptin_Test_Non_Specific_Code' , 'Hypertriglyceridemia' , 'Oral_Diabetes_Treatment' , 'Genetic_testing' , 'Leptin_deficiency' , 'Renal_biopsy' , 'Pancreatic_Disease' , 'Glucose_Panel' , 'HIV' , 'PCOS' , 'Statin' , 'Diabetes' , 'MRI_Scan' , 'Phlebomegaly_Varicose_Veins' , 'Dietary_modification' , 'Insulin_Pump' , 'Lipodystrophy' ) ) ) AND ( "SUBQUERY_0"."PATIENT_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" GROUP BY "SUBQUERY_2"."SUBQUERY_2_COL_0" , "SUBQUERY_2"."SUBQUERY_2_COL_1" 
""";

string sql4 = """
SELECT("SUBQUERY_2"."SUBQUERY_2_COL_0") AS "SUBQUERY_3_COL_0" , ("SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_3_COL_1" , (COUNT(DISTINCT "SUBQUERY_2"."SUBQUERY_2_COL_2")) AS "SUBQUERY_3_COL_2" 
FROM(SELECT("SUBQUERY_1"."PATIENT_DMREFID") AS "SUBQUERY_2_COL_0", (CASE WHEN(("SUBQUERY_1"."CODE" = '00002850101') OR("SUBQUERY_1"."CODE" = '00002882427')) THEN 'U500_insulin' ELSE "SUBQUERY_1"."TRINITYGROUP2" END ) AS "SUBQUERY_2_COL_1" 
, ("SUBQUERY_1"."CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_2" FROM(SELECT * FROM(SELECT * FROM((select * from AMYT12DB.WORK.AMRYT_MYALEPT_MODELLING_COHORT_STEP8_V1 )) AS "SF_CONNECTOR_QUERY_ALIAS") AS "SUBQUERY_0" 
WHERE((("SUBQUERY_0"."SERVICE_DATE" IS NOT NULL) AND((("SUBQUERY_0"."SERVICE_DATE" > to_timestamp_ntz(1651363200000000, 6)) AND("SUBQUERY_0"."SERVICE_DATE" < to_timestamp_ntz(1667260800000000, 6))) 
AND 
CASE WHEN(("SUBQUERY_0"."CODE" = '00002850101') OR("SUBQUERY_0"."CODE" = '00002882427') ) THEN 'U500_insulin' ELSE "SUBQUERY_0"."TRINITYGROUP2" END IN( 'Lipid_Panel' , 'Liver_Biopsy' , 'Liver_Disease' , 'Insulin_Panel' , 'Hyperphagia' , 'Obesity' , 'CGM' , 'Insulin' , 'U500_insulin' , 'Plasmapheresis' , 'Fibrate' , 'Blood_Glucose_Monitor_BGM' , 'Failure_to_Thrive' , 'Echocardiogram' , 'Kidney_Disease' , 'Acanthosis_Nigricans' , 'Insulin_resistance' , 'Cardiomyopathy' , 'Albumin_liver_enzyme' , 'Electrocardiogram' , 'Proteinuria_Micro_Macro_Albuminuria' , 'GLP1_agonists' , 'Liver_Transplant' , 'angiotensin_receptor_blockers_ARB' , 'Splenomegaly' , 'DXA_Scan' , 'Albumin' , 'Leptin_Test_Non_Specific_Code' , 'Hypertriglyceridemia' , 'Oral_Diabetes_Treatment' , 'Genetic_testing' , 'Leptin_deficiency' , 'Renal_biopsy' , 'Pancreatic_Disease' , 'Glucose_Panel' , 'HIV' , 'PCOS' , 'Statin' , 'Diabetes' , 'MRI_Scan' , 'Phlebomegaly_Varicose_Veins' , 'Dietary_modification' , 'Insulin_Pump' , 'Lipodystrophy' ) ) ) AND("SUBQUERY_0"."PATIENT_DMREFID" IS NOT NULL) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" GROUP BY "SUBQUERY_2"."SUBQUERY_2_COL_0" , "SUBQUERY_2"."SUBQUERY_2_COL_1"
""";

string sql5 = """
Select count(distinct PATIENT_ID)
 from
(select * from "AMYT12DB"."WORK"."CLAIMS_MASTER_JUXTA_new_cohort_5yrs" where 
code1 in ('E7801',
'66582041431',
'69238115403',
'67877049005',
'59651005290',
'49884022811',
'00781569031',
'69238115409',
'67877049090',
'66582041454',
'59651005230',
'67877049030',
'60505294509',
'16729043316',
'66582041474',
'00781569005',
'68382077306',
'00591371330',
'68382077305',
'49884022809',
'16729043315',
'51660020005',
'51660020090',
'68382077316',
'49884022805',
'00781569092')
and PROV_BOB_SPECIALTY_GROUP in ('Endocrinology, Diabetes, & Metabolism') )cohort
inner join 
(select Distinct PATIENT_ID as pat from "AMYT12DB"."WORK"."CLAIMS_MASTER_JUXTA_new_cohort_5yrs"
 where code1 in ('76431010501',
'76431011001',
'76431012001',
'76431013001',
'76431014001',
'76431016001',
'61755001301',
'61755001001',
'J1305',
'C9079'
))target_pat
on cohort.PATIENT_ID = target_pat.pat
////
 
// select max(SERVICE_DATE) from "AMYT12DB"."WORK"."CLAIMS_MASTER_JUXTA_new_cohort_5yrs"
// where SERVICE_DATE > '2017-01-01 00:00:00.000'
 
// 
//RX_PROVIDER_DMREFID
""";

string sql6 = """
SELECT PAT,CODE1,SERVICE_DATE,INDEX_DATE,TIMESTAMPDIFF(DAY,SERVICE_DATE,INDEX_DATE) AS DIFFERENCE,
CASE WHEN DIFFERENCE > 0 AND DIFFERENCE <=730 THEN 1 ELSE 0 END AS LOOKBACK_24,
CASE WHEN DIFFERENCE > 0 AND DIFFERENCE <=365 THEN 1 ELSE 0 END AS LOOKBACK_12,
CASE WHEN DIFFERENCE > 365 THEN 1 ELSE 0 END AS CLEANPERIOD_12
FROM
(SELECT PAT,CODE1,SERVICE_DATE FROM
(SELECT RX_PATIENT_DMREFID AS PAT,RX_PACKAGE_DMREFID,RX_FILL_DATE AS SERVICE_DATE FROM "MEDFUSESHASTA"."SHASTA202208"."RXCLAIMS") RX
LEFT JOIN
(SELECT PACKAGE_DMREFID,PACKAGE_NDC11 AS CODE1 FROM "MEDFUSESHASTA"."SHASTA202208"."PACKAGES") PACK
ON RX.RX_PACKAGE_DMREFID = PACK.PACKAGE_DMREFID
UNION ALL
SELECT PAT,CODE1,SERVICE_DATE FROM
(SELECT PX_PATIENT_DMREFID AS PAT,PX_PACKAGE_DMREFID,CAST(PX_PROCEDURE_DATE AS TIMESTAMP) AS SERVICE_DATE FROM "MEDFUSESHASTA"."SHASTA202208"."PXCLAIMS") PX1
LEFT JOIN
(SELECT PACKAGE_DMREFID,PACKAGE_NDC11 AS CODE1 FROM "MEDFUSESHASTA"."SHASTA202208"."PACKAGES") PACK
ON PX1.PX_PACKAGE_DMREFID = PACK.PACKAGE_DMREFID
UNION ALL
SELECT PAT,CODE1,SERVICE_DATE FROM
(SELECT PX_PATIENT_DMREFID AS PAT,PX_PROCEDURE_CODE_DMREFID,CAST(PX_PROCEDURE_DATE AS TIMESTAMP) AS SERVICE_DATE FROM "MEDFUSESHASTA"."SHASTA202208"."PXCLAIMS")PX
LEFT JOIN
(SELECT PROCEDURE_CODE_DMREFID,PROCEDURE_CODE_NO_SEPARATOR AS CODE1 FROM "MEDFUSESHASTA"."SHASTA202208"."PROCEDURES") as PROC
ON PX.PX_PROCEDURE_CODE_DMREFID = PROC.PROCEDURE_CODE_DMREFID) MASTERT
RIGHT JOIN 
(select distinct PATIENT_DMREFID,INDEX_DATE from "AMYT12DB"."WORK"."AMRYT_MYCAPSSA_EDA_ACTIVE_PATIENTS")PAT
ON MASTERT.PAT = PAT.PATIENT_DMREFID
where MASTERT.CODE1 IN ('J1930','C9237','J1932','15054006001','15054009001','15054012001','15054012002','15054106003','15054106004',
                '15054109003','15054109004','15054112003','15054112004','J2353','J2354','00078018001','00078018003','00078018004',
                '00078018015','00078018061','00078018101','00078018103','00078018104','00078018115','00078018161','00078018201',
                '00078018203','00078018204','00078018217','00078018261','00078018325','00078018425','00078034061','00078034084',
                '00078034161','00078034184','00078034261','00078034284','00078064661','00078064681','00078064761','00078064781',
                '00078064861','00078064881','00078079061','00078079761','00078080461','00078081181','00078081881','00078082581',
                '00641617401','00641617410','00641617501','00641617510','00641617601','00641617610','00641617701','00641617801',
                '00703330101','00703330104','00703331101','00703331104','00703332104','00703332194','00703333301','00703334301',
                '00781316475','00781316575','00781916475','00781916575','00781916671','00781916695','00781916771','00781916795',
                '00781916871','00781916895','23155068531','23155068631','25021045101','25021045201','25021045301','25021045405',
                '25021045505','55390016010','55390016110','55390016210','55390016301','55390016401','55390037510','55390037610',
                '55390037701','62756009440','62756009444','62756034844','62756034944','62756035040','62756035144','62756035240',
                '62756045236','63323036501','63323036504','63323037601','63323037604','63323037701','63323037704','63323037805',
                '63323037905','64679063201','64679063302','64679063401','64679063502','67457023900','67457023901','67457024500',
                '67457024501','67457024600','67457024601')
""";
var sql10 ="""
SELECT ( "SUBQUERY_1"."SUBQUERY_1_COL_0" ) AS "SUBQUERY_2_COL_0" , ( COUNT ( "SUBQUERY_1"."SUBQUERY_1_COL_1" ) ) AS "SUBQUERY_2_COL_1" , ( COUNT ( "SUBQUERY_1"."SUBQUERY_1_COL_2" ) ) AS "SUBQUERY_2_COL_2" , ( COUNT ( "SUBQUERY_1"."SUBQUERY_1_COL_3" ) ) AS "SUBQUERY_2_COL_3" FROM ( SELECT ( "SUBQUERY_0"."SUBQUERY_1_COL_0" ) AS "SUBQUERY_1_COL_0" , ( "SUBQUERY_0"."SUBQUERY_1_COL_1" ) AS "SUBQUERY_1_COL_1" , ( "SUBQUERY_0"."SUBQUERY_1_COL_2" ) AS "SUBQUERY_1_COL_2" , ( "SUBQUERY_0"."SUBQUERY_1_COL_3" ) AS "SUBQUERY_1_COL_3" , ( "SUBQUERY_0"."SUBQUERY_1_COL_4" ) AS "SUBQUERY_1_COL_4" FROM ( ( SELECT ( "SUBQUERY_0"."SUBQUERY_8_COL_1" ) AS "SUBQUERY_1_COL_0" , ( "SUBQUERY_0"."SUBQUERY_8_COL_2" ) AS "SUBQUERY_1_COL_1" , ( DATEADD(day, NULL , TO_DATE('1970-01-01')) ) AS "SUBQUERY_1_COL_2" , ( NULL ) AS "SUBQUERY_1_COL_3" , ( 1 ) AS "SUBQUERY_1_COL_4" FROM ( ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( CAST ( "SUBQUERY_6"."SUBQUERY_6_COL_2" AS DATE ) ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."RX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."RX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."RX_FILL_DATE" ) AS "SUBQUERY_2_COL_2" , ( "SUBQUERY_1"."RX_PROVIDER_DMREFID" ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.RXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."RX_FILL_DATE" AS DATE ) > DATEADD(day, 17167 , TO_DATE('1970-01-01')) ) OR ( CAST ( "SUBQUERY_0"."RX_FILL_DATE" AS DATE ) < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( "SUBQUERY_0"."RX_PROVIDER_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) UNION ALL ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( "SUBQUERY_6"."SUBQUERY_6_COL_2" ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."PX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."PX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."PX_PROCEDURE_DATE" ) AS "SUBQUERY_2_COL_2" , ( COALESCE ( "SUBQUERY_1"."PX_RENDERING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_OPERATING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_ATTENDING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_REFERRING_PROVIDER_DMREFID" ) ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.PXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."PX_PROCEDURE_DATE" AS TIMESTAMP ) > to_timestamp_ntz( 1468108800000000 , 6) ) OR ( "SUBQUERY_0"."PX_PROCEDURE_DATE" < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( COALESCE ( "SUBQUERY_0"."PX_RENDERING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_OPERATING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_ATTENDING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_REFERRING_PROVIDER_DMREFID" ) IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) UNION ALL ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( "SUBQUERY_6"."SUBQUERY_6_COL_2" ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."DX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."DX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."DX_SERVICE_DATE" ) AS "SUBQUERY_2_COL_2" , ( "SUBQUERY_1"."DX_PRACTITIONER_DMREFID" ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.DXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."DX_SERVICE_DATE" AS TIMESTAMP ) > to_timestamp_ntz( 1468108800000000 , 6) ) OR ( "SUBQUERY_0"."DX_SERVICE_DATE" < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( "SUBQUERY_0"."DX_PRACTITIONER_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) ) AS "SUBQUERY_0" ) UNION ALL ( SELECT ( "SUBQUERY_0"."SUBQUERY_8_COL_1" ) AS "SUBQUERY_1_COL_0" , ( NULL ) AS "SUBQUERY_1_COL_1" , ( "SUBQUERY_0"."SUBQUERY_8_COL_3" ) AS "SUBQUERY_1_COL_2" , ( NULL ) AS "SUBQUERY_1_COL_3" , ( 2 ) AS "SUBQUERY_1_COL_4" FROM ( ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( CAST ( "SUBQUERY_6"."SUBQUERY_6_COL_2" AS DATE ) ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."RX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."RX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."RX_FILL_DATE" ) AS "SUBQUERY_2_COL_2" , ( "SUBQUERY_1"."RX_PROVIDER_DMREFID" ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.RXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."RX_FILL_DATE" AS DATE ) > DATEADD(day, 17167 , TO_DATE('1970-01-01')) ) OR ( CAST ( "SUBQUERY_0"."RX_FILL_DATE" AS DATE ) < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( "SUBQUERY_0"."RX_PROVIDER_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) UNION ALL ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( "SUBQUERY_6"."SUBQUERY_6_COL_2" ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."PX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."PX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."PX_PROCEDURE_DATE" ) AS "SUBQUERY_2_COL_2" , ( COALESCE ( "SUBQUERY_1"."PX_RENDERING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_OPERATING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_ATTENDING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_REFERRING_PROVIDER_DMREFID" ) ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.PXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."PX_PROCEDURE_DATE" AS TIMESTAMP ) > to_timestamp_ntz( 1468108800000000 , 6) ) OR ( "SUBQUERY_0"."PX_PROCEDURE_DATE" < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( COALESCE ( "SUBQUERY_0"."PX_RENDERING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_OPERATING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_ATTENDING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_REFERRING_PROVIDER_DMREFID" ) IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) UNION ALL ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( "SUBQUERY_6"."SUBQUERY_6_COL_2" ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."DX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."DX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."DX_SERVICE_DATE" ) AS "SUBQUERY_2_COL_2" , ( "SUBQUERY_1"."DX_PRACTITIONER_DMREFID" ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.DXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."DX_SERVICE_DATE" AS TIMESTAMP ) > to_timestamp_ntz( 1468108800000000 , 6) ) OR ( "SUBQUERY_0"."DX_SERVICE_DATE" < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( "SUBQUERY_0"."DX_PRACTITIONER_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) ) AS "SUBQUERY_0" ) UNION ALL ( SELECT ( "SUBQUERY_0"."SUBQUERY_8_COL_1" ) AS "SUBQUERY_1_COL_0" , ( NULL ) AS "SUBQUERY_1_COL_1" , ( DATEADD(day, NULL , TO_DATE('1970-01-01')) ) AS "SUBQUERY_1_COL_2" , ( "SUBQUERY_0"."SUBQUERY_8_COL_0" ) AS "SUBQUERY_1_COL_3" , ( 3 ) AS "SUBQUERY_1_COL_4" FROM ( ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( CAST ( "SUBQUERY_6"."SUBQUERY_6_COL_2" AS DATE ) ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."RX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."RX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."RX_FILL_DATE" ) AS "SUBQUERY_2_COL_2" , ( "SUBQUERY_1"."RX_PROVIDER_DMREFID" ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.RXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."RX_FILL_DATE" AS DATE ) > DATEADD(day, 17167 , TO_DATE('1970-01-01')) ) OR ( CAST ( "SUBQUERY_0"."RX_FILL_DATE" AS DATE ) < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( "SUBQUERY_0"."RX_PROVIDER_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) UNION ALL ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( "SUBQUERY_6"."SUBQUERY_6_COL_2" ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."PX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."PX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."PX_PROCEDURE_DATE" ) AS "SUBQUERY_2_COL_2" , ( COALESCE ( "SUBQUERY_1"."PX_RENDERING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_OPERATING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_ATTENDING_PROVIDER_DMREFID" , "SUBQUERY_1"."PX_REFERRING_PROVIDER_DMREFID" ) ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.PXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."PX_PROCEDURE_DATE" AS TIMESTAMP ) > to_timestamp_ntz( 1468108800000000 , 6) ) OR ( "SUBQUERY_0"."PX_PROCEDURE_DATE" < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( COALESCE ( "SUBQUERY_0"."PX_RENDERING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_OPERATING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_ATTENDING_PROVIDER_DMREFID" , "SUBQUERY_0"."PX_REFERRING_PROVIDER_DMREFID" ) IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) UNION ALL ( SELECT ( "SUBQUERY_6"."SUBQUERY_6_COL_3" ) AS "SUBQUERY_8_COL_0" , ( "SUBQUERY_6"."SUBQUERY_6_COL_0" ) AS "SUBQUERY_8_COL_1" , ( "SUBQUERY_6"."SUBQUERY_6_COL_1" ) AS "SUBQUERY_8_COL_2" , ( "SUBQUERY_6"."SUBQUERY_6_COL_2" ) AS "SUBQUERY_8_COL_3" FROM ( SELECT ( "SUBQUERY_2"."SUBQUERY_2_COL_0" ) AS "SUBQUERY_6_COL_0" , ( "SUBQUERY_2"."SUBQUERY_2_COL_1" ) AS "SUBQUERY_6_COL_1" , ( "SUBQUERY_2"."SUBQUERY_2_COL_2" ) AS "SUBQUERY_6_COL_2" , ( "SUBQUERY_2"."SUBQUERY_2_COL_3" ) AS "SUBQUERY_6_COL_3" FROM ( SELECT ( "SUBQUERY_1"."DX_PATIENT_DMREFID" ) AS "SUBQUERY_2_COL_0" , ( "SUBQUERY_1"."DX_CLAIM_DMREFID" ) AS "SUBQUERY_2_COL_1" , ( "SUBQUERY_1"."DX_SERVICE_DATE" ) AS "SUBQUERY_2_COL_2" , ( "SUBQUERY_1"."DX_PRACTITIONER_DMREFID" ) AS "SUBQUERY_2_COL_3" FROM ( SELECT * FROM ( SELECT * FROM ( ( select * from MEDFUSESHASTA.SHASTA202208.DXCLAIMS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_0" WHERE ( ( ( CAST ( "SUBQUERY_0"."DX_SERVICE_DATE" AS TIMESTAMP ) > to_timestamp_ntz( 1468108800000000 , 6) ) OR ( "SUBQUERY_0"."DX_SERVICE_DATE" < DATEADD(day, 18992 , TO_DATE('1970-01-01')) ) ) AND ( "SUBQUERY_0"."DX_PRACTITIONER_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_1" ) AS "SUBQUERY_2" WHERE EXISTS ( SELECT * FROM ( SELECT ( "SUBQUERY_4"."PROV_DMREFID" ) AS "SUBQUERY_5_COL_0" FROM ( SELECT * FROM ( SELECT * FROM ( ( select PROV_DMREFID,PROV_BOB_SPECIALTY,PROV_BOB_SPECIALTY_GROUP from MEDFUSESHASTA.SHASTA202208.PROVIDERS ) ) AS "SF_CONNECTOR_QUERY_ALIAS" ) AS "SUBQUERY_3" WHERE ( ( ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" IS NOT NULL ) AND ( "SUBQUERY_3"."PROV_BOB_SPECIALTY_GROUP" = 'Endocrinology, Diabetes, & Metabolism' ) ) AND ( "SUBQUERY_3"."PROV_DMREFID" IS NOT NULL ) ) ) AS "SUBQUERY_4" ) AS "SUBQUERY_5" WHERE ( "SUBQUERY_2"."SUBQUERY_2_COL_3" = "SUBQUERY_5"."SUBQUERY_5_COL_0" ) ) ) AS "SUBQUERY_6" ) ) AS "SUBQUERY_0" ) ) AS "SUBQUERY_0" GROUP BY "SUBQUERY_0"."SUBQUERY_1_COL_0" , "SUBQUERY_0"."SUBQUERY_1_COL_1" , "SUBQUERY_0"."SUBQUERY_1_COL_2" , "SUBQUERY_0"."SUBQUERY_1_COL_3" , "SUBQUERY_0"."SUBQUERY_1_COL_4" ) AS "SUBQUERY_1" GROUP BY "SUBQUERY_1"."SUBQUERY_1_COL_0"
""";

var sql11 = """
	
SELECT COUNT(*) from (select PATIENT_DMREFID, TRINITYGROUP2, CLAIM_DMREFID, PROVIDER_DMREFID, SERVICE_DATE, count(*) as cnt 
from (SELECT * FROM "AMYT12DB"."WORK"."AMRYT_MYCAPSSA_MASTER_UNIVERSE_CLAIM_PROV" A LEFT JOIN "MEDFUSESHASTA"."SHASTA202208"."PROVIDERS" B ON A.PROVIDER_DMREFID = B.PROV_DMREFID WHERE A.TRINITYGROUP2 IN ('Octreotide', 'Lanreotide', 'Pasireotide')) 
group by PATIENT_DMREFID, TRINITYGROUP2, CLAIM_DMREFID, PROVIDER_DMREFID, SERVICE_DATE 
having cnt>1)A
""";
TSqlParser parser = new TSql160Parser(true);
IList<ParseError> parseErrors;
//if(sql5.IndexOf("/") > 0)
//{
//	sql5 = sql5[..sql5.IndexOf("/")];
//}
TSqlFragment sqlFragment = parser.Parse(new StringReader(sql11), out parseErrors);
if (parseErrors.Count > 0) 
{
	parseErrors.Select(e => e.Message).Dump();
}

MyVistor visitor = new MyVistor();
sqlFragment.Accept(visitor);
//sqlFragment.Dump();
//visitor.VisitedNodes.Dump();
//visitor.Result.Dump();
//
//Assembly assembly = Assembly.GetAssembly(typeof(TSqlFragment));
//assembly.GetAllChildType(typeof(BooleanExpression)).Dump();
//
//static class TypeHelper
//{
//	public static IEnumerable<Type> GetInheritanceHierarchy(this Type type)
//	{
//		for (var current = type; current != null; current = current.BaseType)
//		{
//			yield return current;
//		}
//	}
//
//	public static IEnumerable<(Type, IEnumerable<Type>)> GetAllChildType(this Assembly assembly, Type type)
//	{
//		return assembly.GetTypes().Select(t => (t, hierachy: GetInheritanceHierarchy(t)))
//			.Where(h => h.hierachy.Contains(type)).OrderBy(h => h.t.Name);
//	}
//}





/// <summary>not thread safe</summary>
class MyVistor : TSqlFragmentVisitor
{
	protected Stack<(TSqlFragment, Type)> _visitedNodes = new();
	public IReadOnlyCollection<(TSqlFragment, Type)> VisitedNodes => _visitedNodes;
	private StringBuilder _builder = new StringBuilder();
	
	public void Clear()
	{
		_visitedNodes.Clear();
		_builder.Clear();
	}
	/// <summary>not fully parsable. for debug only</summary>
	public string Result => _builder.ToString();
	public override void ExplicitVisit(TSqlBatch node)
	{
		//node.Dump();
		//PrintAndTrackVisit(node);
		//node.Statements.Dump();
		foreach(TSqlStatement statment in node.Statements)
		{
			TrackStatementExpression(statment);
		}
		base.ExplicitVisit(node);
	}
	
	

	public override void ExplicitVisit(SearchedCaseExpression node)
	{
		//PrintAndTrackVisit(node);
		//node.Dump();
		_builder.Append("Case");
		_builder.AppendLine();
		foreach(SearchedWhenClause clause in node.WhenClauses)
		{
			TrackWhenExpression(clause.WhenExpression);
			TrackThenExpression(clause.ThenExpression);
		}
		TrackElseExpression(node.ElseExpression);
		_builder.AppendLine();
		base.ExplicitVisit(node);
	}
	
	private void TrackStatementExpression(TSqlStatement expression)
	{
		if(expression is SelectStatement select)
		{
			TrackQueryExpression(select.QueryExpression); 
		}
	}

	private void TrackQueryExpression(QueryExpression expression)
	{
		if (expression is BinaryQueryExpression binaryQuery)
		{
			TrackQueryExpression(binaryQuery.FirstQueryExpression);
			//binaryQuery.FirstQueryExpression.GetType().Dump();
			TrackQueryExpression(binaryQuery.SecondQueryExpression);
		}
		else if(expression is QuerySpecification query)
		{
			//query.Dump();
			foreach(SelectElement element in query.SelectElements)
			{
				TrackSelectExpression(element);
			}
			TrackFromExpression(query.FromClause);
			TrackWhereExpression(query.WhereClause);
			TrackGroupByExpression(query.GroupByClause);
			TrackHavingByExpression(query.HavingClause);
		}
	}
	private void TrackSelectExpression(SelectElement expression)
	{

	}

	public override void ExplicitVisit(WhereClause node)
	{
		TrackSearchConditionExpression(node.SearchCondition);
		base.ExplicitVisit(node);
	}
	

	

	private void TrackSearchConditionExpression(BooleanExpression expression)
	{
		//expression.Dump();
		TrackBooleanExpression(expression);
		//expression.ScriptTokenStream.Skip(expression.FirstTokenIndex).Take(expression.LastTokenIndex - (expression.FirstTokenIndex) + 1).Dump();
	}

	private void TrackBooleanExpression(BooleanExpression expression)
	{
		if(expression is BooleanBinaryExpression bbe)
		{
			TrackBooleanBinaryExpression(bbe);
		}
		else if(expression is BooleanParenthesisExpression bpe)
		{
			TrackBooleanParenthesisExpression(bpe);
		}
		else if(expression is ExistsPredicate ep)
		{
			TrackScalarSubQueryExpression(ep.Subquery);
		}
		else
		{
			(expression.GetType().Name,expression.ScriptTokenStream.Skip(expression.FirstTokenIndex).Take(expression.LastTokenIndex - expression.FirstTokenIndex + 1)).Dump();
		}
		//else if(expression is BooleanComparisonExpression bce)
		//{
		//	//TrackScalarExpression(bce.FirstExpression);
		//	//bce.ComparisonType.Dump();
		//	//TrackScalarExpression(bce.FirstExpression);
		//	bce.ScriptTokenStream.Skip(bce.FirstTokenIndex).Take(bce.LastTokenIndex - bce.FirstTokenIndex + 1).Dump();
		//}
		//else if(expression is InPredicate ip)
		//{
		//	ip.ScriptTokenStream.Skip(ip.FirstTokenIndex).Take(ip.LastTokenIndex - ip.FirstTokenIndex + 1).Dump();
		//}
	}

	private void TrackScalarSubQueryExpression(ScalarSubquery expression)
	{
		if (expression.QueryExpression is QuerySpecification qs)
		{
			TrackWhereClauseExpression(qs.WhereClause);
		}
		
	}

	private void TrackWhereClauseExpression(WhereClause expression)
	{
		TrackSearchConditionExpression(expression.SearchCondition);
	}

	private void TrackBooleanBinaryExpression(BooleanBinaryExpression expression)
	{
		TrackBooleanExpression(expression.FirstExpression);
		//expression.BinaryExpressionType.Dump();
		TrackBooleanExpression(expression.SecondExpression);
	}

	private void TrackBooleanParenthesisExpression(BooleanParenthesisExpression expression)
	{
		TrackBooleanExpression(expression.Expression);
	}

	private void TrackFromExpression(FromClause expression)
	{

	}

	private void TrackWhereExpression(WhereClause expression)
	{
	}

	private void TrackGroupByExpression(GroupByClause expression)
	{
	}

	private void TrackHavingByExpression(HavingClause expression)
	{
	}

	private void TrackOrderByExpression(OrderByClause expression)
	{
	}

	private void TrackWhenExpression(BooleanExpression expression)
	{
		_builder.Append("When");
		//expression.ScriptTokenStream.Skip(expression.FirstTokenIndex-2).Take(expression.LastTokenIndex - (expression.FirstTokenIndex-2) + 1).Dump();
		if(expression is InPredicate predicate)
		{
			TrackInPredicateExpression(predicate);
		}
	}
	private void TrackElseExpression(ScalarExpression expression)
	{
		if (expression is StringLiteral elseLiteral)
		{
			_builder.Append("ELSE");
			_builder.AppendWhiteSpace();
			_builder.AppendQuoteLiteral(elseLiteral.Value);
			_builder.AppendWhiteSpace();
		}
	}

	private void TrackThenExpression(ScalarExpression expression)
	{
		if (expression is StringLiteral thenliteral)
		{
			_builder.AppendWhiteSpace();
			_builder.Append("Then");
			_builder.AppendWhiteSpace();
			_builder.AppendQuoteLiteral(thenliteral.Value);
			_builder.AppendLine();
		}
	}
	private void TrackInPredicateExpression(InPredicate predicate)
	{
		TrackInPredicateExpressionExpression(predicate.Expression);
		_builder.Append("in");
		_builder.AppendWhiteSpace();
		_builder.Append("(");
		foreach(ScalarExpression expression in predicate.Values)
		{
			if(expression is StringLiteral literal)
			{
				_builder.AppendQuoteLiteral(literal.Value);	
			}
			if(expression != predicate.Values.Last())
			{
				_builder.Append(',');
			}
		}
		_builder.Append(")");
	}
	
	
	private void TrackInPredicateExpressionExpression(ScalarExpression expression)
	{
		if (expression is ColumnReferenceExpression column)
		{
			_builder.AppendWhiteSpace();
			foreach (Identifier identifier in column.MultiPartIdentifier.Identifiers)
			{
				if (identifier.QuoteType == QuoteType.SquareBracket)
				{
					_builder.AppenBracketIdentfier(identifier.Value);
				}
				else if (identifier.QuoteType == QuoteType.DoubleQuote)
				{
					_builder.AppendDoubleQuoteLiteral(identifier.Value);
				}
				else if (identifier.QuoteType == QuoteType.NotQuoted)
				{
					_builder.Append(identifier.Value);
				}
			}
			_builder.AppendWhiteSpace();
		}
	}

	protected void PrintAndTrackVisit<T>(T node) where T : TSqlFragment
	{
		_visitedNodes.Push((node, node.GetType()));
		//$"Visit {node.GetType().Name}".Dump();
		//node.Dump();
	}
}

public static class StringBuilderHelper
{
	public static StringBuilder AppendWhiteSpace(this StringBuilder bulider)
	{
		return bulider.Append(" ");
	}

	public static StringBuilder AppendQuoteLiteral(this StringBuilder bulider, string value)
	{
		return bulider.Append($"\'{value}\'");
	}

	public static StringBuilder AppendDoubleQuoteLiteral(this StringBuilder bulider, string value)
	{
		return bulider.Append($"\"{value}\"");
	}

	public static StringBuilder AppenBracketIdentfier(this StringBuilder bulider, string value)
	{
		return bulider.Append($"[{value}]");
	}
}


//class OwnVisitor : TSqlFragmentVisitor
//{
//	public override void ExplicitVisit(SelectStatement node)
//	{
//		QuerySpecification querySpecification = node.QueryExpression as QuerySpecification;
//
//		FromClause fromClause = querySpecification.FromClause;
//		// There could be more than one TableReference!
//		// TableReference is not sure to be a NamedTableReference, could be as example a QueryDerivedTable
//		NamedTableReference namedTableReference = fromClause.TableReferences[0] as NamedTableReference;
//		TableReferenceWithAlias tableReferenceWithAlias = fromClause.TableReferences[0] as TableReferenceWithAlias;
//		string baseIdentifier = namedTableReference?.SchemaObject.BaseIdentifier?.Value;
//		string schemaIdentifier = namedTableReference?.SchemaObject.SchemaIdentifier?.Value;
//		string databaseIdentifier = namedTableReference?.SchemaObject.DatabaseIdentifier?.Value;
//		string serverIdentifier = namedTableReference?.SchemaObject.ServerIdentifier?.Value;
//		string alias = tableReferenceWithAlias.Alias?.Value;
//		Console.WriteLine("From:");
//		Console.WriteLine($"  {"Server:",-10} {serverIdentifier}");
//		Console.WriteLine($"  {"Database:",-10} {databaseIdentifier}");
//		Console.WriteLine($"  {"Schema:",-10} {schemaIdentifier}");
//		Console.WriteLine($"  {"Table:",-10} {baseIdentifier}");
//		Console.WriteLine($"  {"Alias:",-10} {alias}");
//
//
//
//		// Example of changing the alias:
//		//(fromClause.TableReferences[0] as NamedTableReference).Alias = new Identifier() { Value = baseIdentifier[0].ToString() };
//
//		Console.WriteLine("Statement:");
//		Console.WriteLine(node.ToSqlString().Indent(2));
//
//		Console.WriteLine("¯".Multiply(40));
//
//		base.ExplicitVisit(node);
//	}
//}
